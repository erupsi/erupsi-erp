openapi: 3.0.4
info:
  title: API E-commerce Internal (Refined)
  description: |-
    Dokumen API Contract yang telah disempurnakan untuk sistem e-commerce internal. 
    API ini menjadi jembatan antara layanan frontend (GUI), database lokal, dan layanan eksternal (Inventory, Financial, User Service).

    Mendukung dua alur utama:
    1.  *Alur Penjual (Karyawan):* Memilih dan mendaftarkan barang dari inventaris pusat untuk dijual.
    2.  *Alur Pembeli (User):* Menelusuri, memasukkan ke keranjang, dan membeli barang.
  version: "1.1.0"
  contact:
    name: API Development Team
    email: dev-team@yourcompany.com

servers:
  - url: https://api.yourcompany.com/v1
    description: Production Server

tags:
  - name: Internal - Product Management
    description: Endpoint untuk karyawan mengelola produk yang dijual di e-commerce.
  - name: Public - Products & Categories
    description: Endpoint publik untuk menelusuri produk dan kategori.
  - name: E-commerce - Cart
    description: Endpoint untuk mengelola keranjang belanja user.
  - name: E-commerce - Orders
    description: Endpoint untuk proses checkout dan melihat riwayat pesanan.
  - name: Admin - Dashboard & Analytics
    description: Endpoint untuk kebutuhan data visual dan statistik.

paths:
  # ===============================================================
  # == Internal - Product Management Paths
  # ===============================================================
  /internal/source-inventory/products:
    get:
      tags:
        - Internal - Product Management
      summary: Browse Products from Source Inventory
      description: Mengambil daftar semua produk yang ada di sistem inventaris pusat agar bisa dipilih untuk dijual.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema: {type: integer, default: 1}
        - name: limit
          in: query
          schema: {type: integer, default: 20}
        - name: search
          in: query
          schema: {type: string}
        - name: categoryId
          in: query
          schema: {type: string, format: uuid}
      responses:
        '200':
          description: Daftar produk dari inventaris pusat berhasil diambil.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceInventoryProductListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /ecommerce/products/list-for-sale:
    post:
      tags:
        - Internal - Product Management
      summary: List Products for Sale
      description: Mendaftarkan satu atau lebih varian produk dari inventaris pusat untuk dijual di e-commerce dengan menetapkan harga dan kuantitas jual.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListForSaleRequest'
      responses:
        '201':
          description: Produk berhasil didaftarkan untuk dijual.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /ecommerce/products/{variantId}:
    put:
      tags:
        - Internal - Product Management
      summary: Update E-commerce Product
      description: Mengubah data produk yang sudah terdaftar di e-commerce, misalnya mengubah harga atau status aktif.
      security:
        - bearerAuth: []
      parameters:
        - name: variantId
          in: path
          required: true
          schema: {type: string, format: uuid}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Data produk berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdateResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ===============================================================
  # == Public - Products & Categories Paths
  # ===============================================================
  /products:
    get:
      tags:
        - Public - Products & Categories
      summary: Browse Available Products
      description: Mendapatkan daftar semua produk yang aktif dan tersedia untuk dijual di platform e-commerce.
      parameters:
        - name: page
          in: query
          schema: {type: integer, default: 1}
        - name: limit
          in: query
          schema: {type: integer, default: 20}
        - name: search
          in: query
          schema: {type: string}
        - name: brandId
          in: query
          schema: {type: string, format: uuid}
        - name: categoryId
          in: query
          schema: {type: string, format: uuid}
        - name: sortBy
          in: query
          schema: {type: string, enum: [price_asc, price_desc, name_asc]}
      responses:
        '200':
          description: Daftar produk yang tersedia untuk dijual.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProductListResponse'

  /products/{productId}:
    get:
      tags:
        - Public - Products & Categories
      summary: Get Product Details
      description: Melihat detail lengkap dari satu produk beserta semua variannya.
      parameters:
        - name: productId
          in: path
          required: true
          schema: {type: string, format: uuid}
      responses:
        '200':
          description: Detail produk.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicProduct'
        '404':
          $ref: '#/components/responses/NotFoundError'
        
  /categories:
    get:
      tags:
        - Public - Products & Categories
      summary: Get All Product Categories
      description: Mengambil daftar semua kategori produk untuk keperluan filter di frontend.
      responses:
        '200':
          description: Daftar kategori produk.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  # ===============================================================
  # == E-commerce - Cart Paths
  # ===============================================================
  /cart:
    get:
      tags:
        - E-commerce - Cart
      summary: View Cart
      description: Melihat isi keranjang belanja user saat ini.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Isi keranjang belanja.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /cart/items:
    post:
      tags:
        - E-commerce - Cart
      summary: Add Item to Cart
      description: Menambahkan satu varian produk ke dalam keranjang belanja user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Produk berhasil ditambahkan.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /cart/items/{itemId}:
    delete:
      tags:
        - E-commerce - Cart
      summary: Remove Item from Cart
      description: Menghapus item dari keranjang belanja.
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema: {type: string, format: uuid}
      responses:
        '200':
          description: Item berhasil dihapus.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # ===============================================================
  # == E-commerce - Orders Paths
  # ===============================================================
  /orders/checkout:
    post:
      tags:
        - E-commerce - Orders
      summary: Checkout Cart and Create Order
      description: Membuat pesanan (sales order) dari item yang ada di keranjang.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCheckoutRequest'
      responses:
        '201':
          description: Pesanan berhasil dibuat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: "Gagal membuat pesanan, misal keranjang kosong atau stok tidak cukup."

  /orders:
    get:
      tags:
        - E-commerce - Orders
      summary: Get User's Order History
      description: Melihat riwayat pesanan dari user yang sedang login.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar riwayat pesanan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderSummary'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        
  # ===============================================================
  # == Admin - Dashboard & Analytics
  # ===============================================================
  /dashboard/summary:
    get:
      tags:
        - Admin - Dashboard & Analytics
      summary: Get Sales Summary
      description: Mendapatkan ringkasan data penjualan untuk periode tertentu.
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
      responses:
        '200':
          description: Ringkasan penjualan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /dashboard/top-selling-products:
    get:
      tags:
        - Admin - Dashboard & Analytics
      summary: Get Top Selling Products
      description: Mendapatkan daftar produk terlaris berdasarkan kuantitas atau pendapatan.
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: Daftar produk terlaris.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopSellingProduct'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /dashboard/inventory-alerts:
    get:
      tags:
        - Admin - Dashboard & Analytics
      summary: Get Low Stock Inventory Alerts
      description: Mendapatkan daftar produk yang stoknya menipis (di bawah reorder_point).
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar produk stok menipis.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryAlert'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

# ===============================================================
# == Reusable Components
# ===============================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Pagination:
      type: object
      properties:
        currentPage: {type: integer}
        totalPages: {type: integer}
        totalItems: {type: integer}

    # === Schemas for Internal Product Management ===
    SourceInventoryProduct:
      type: object
      properties:
        variantId: {type: string, format: uuid}
        warehouseId: {type: string, format: uuid, description: ID gudang asal barang.} # CHANGED
        sku: {type: string}
        productName: {type: string}
        brandName: {type: string}
        attributes: {type: object, additionalProperties: true}
        currentStock: {type: integer}

    SourceInventoryProductListResponse:
      type: object
      properties:
        pagination: {$ref: '#/components/schemas/Pagination'}
        data:
          type: array
          items:
            $ref: '#/components/schemas/SourceInventoryProduct'

    ListForSaleRequest:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              variantId: {type: string, format: uuid}
              price: {type: number, format: double}
              quantity: {type: integer, description: Jumlah stok yang akan dijual.} # CHANGED
              isActive: {type: boolean}

    ProductUpdateRequest:
      type: object
      properties:
        price: {type: number, format: double}
        isActive: {type: boolean}
        
    ProductUpdateResponse:
      type: object
      properties:
        message: {type: string}
        data:
          type: object
          properties:
            variantId: {type: string, format: uuid}
            price: {type: number, format: double}
            isActive: {type: boolean}

    # === Schemas for Public Products ===
    PublicProduct:
      type: object
      properties:
        productId: {type: string, format: uuid}
        productName: {type: string}
        brand:
          type: object
          properties:
            id: {type: string, format: uuid}
            name: {type: string}
        category:
          type: object
          properties:
            id: {type: string, format: uuid}
            name: {type: string}
        description: {type: string}
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'

    ProductVariant:
      type: object
      properties:
        variantId: {type: string, format: uuid}
        warehouseId: {type: string, format: uuid, description: ID gudang asal barang.} # CHANGED
        sku: {type: string}
        price: {type: number, format: double}
        stock: {type: integer}
        attributes: {type: object, additionalProperties: true}

    PublicProductListResponse:
      type: object
      properties:
        pagination: {$ref: '#/components/schemas/Pagination'}
        data:
          type: array
          items:
            $ref: '#/components/schemas/PublicProduct'
        
    Category:
      type: object
      properties:
        id: {type: string, format: uuid}
        name: {type: string}
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    # === Schemas for Cart ===
    AddToCartRequest:
      type: object
      properties:
        variantId: {type: string, format: uuid}
        quantity: {type: integer, minimum: 1}
        
    CartItem:
      type: object
      properties:
        itemId: {type: string, format: uuid}
        productId: {type: string, format: uuid} # CHANGED
        variantId: {type: string, format: uuid}
        productName: {type: string}
        quantity: {type: integer}
        price: {type: number, format: double}
        subtotal: {type: number, format: double}
        
    CartResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/CartItem'
            totalAmount: {type: number, format: double}
            
    # === Schemas for Orders ===
    OrderCheckoutRequest:
      type: object
      properties:
        paymentMethod: {type: string, example: "VIRTUAL_ACCOUNT_BCA"}
        
    OrderResponse:
      type: object
      properties:
        message: {type: string}
        data:
          type: object
          properties:
            orderId: {type: string, format: uuid}
            so_number: {type: string}
            status: {type: string}
            order_date: {type: string, format: date-time}
            totalAmount: {type: number, format: double} # CHANGED
            paymentDetails:
              type: object
              properties:
                invoiceId: {type: string}
                virtualAccountNumber: {type: string}

    OrderSummary:
      type: object
      properties:
        orderId: {type: string, format: uuid}
        so_number: {type: string}
        status: {type: string}
        order_date: {type: string, format: date-time}
        totalAmount: {type: number, format: double} # CHANGED
        
    # === Schemas for Dashboard ===
    DashboardSummary:
      type: object
      properties:
        data:
          type: object
          properties:
            period: {type: string}
            totalRevenue: {type: number, format: double}
            ordersCount: {type: integer}
            itemsSoldCount: {type: integer}
    
    TopSellingProduct:
      type: object
      properties:
        variantId: {type: string, format: uuid}
        productName: {type: string}
        sku: {type: string}
        totalSold: {type: integer}
        totalRevenue: {type: number, format: double}
        
    InventoryAlert:
      type: object
      properties:
        variantId: {type: string, format: uuid}
        productName: {type: string}
        sku: {type: string}
        currentStock: {type: integer}
        reorderPoint: {type: integer}
        
    # === Generic Error Schema ===
    Error:
      type: object
      properties:
        code: {type: string}
        message: {type: string}
        
  responses:
    NotFoundError:
      description: Sumber daya yang diminta tidak ditemukan.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Gagal autentikasi. Token tidak valid atau tidak ada.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Akses ditolak. User tidak memiliki hak untuk mengakses sumber daya ini.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Request tidak valid. Cek kembali parameter atau request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'